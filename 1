import ccxt
import pandas as pd
import time
import traceback
from config import BINANCE_API_KEY, BINANCE_API_SECRET, symbols

# Create a Binance Futures client
exchange = ccxt.binance({
    'apiKey': BINANCE_API_KEY,
    'secret': BINANCE_API_SECRET,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'future',  # Set the default type to futures
    }
})

# Define Supertrend strategy parameters
multiplier = 1.5  # Multiplier for ATR
period = 10  # ATR period

# Track the last order type placed for each symbol
last_order_types = {symbol: None for symbol in symbols}
open_orders = {symbol: None for symbol in symbols}

# Fixed quantity in USDT worth of contracts
fixed_quantity_usdt = 6

# Function to fetch historical data for futures
def fetch_ohlcv(symbol, timeframe, limit):
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['tr'] = df['high'] - df['low']  # Calculate True Range
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate Supertrend
def calculate_supertrend(df, period, multiplier):
    atr = df['tr'].rolling(period).mean()
    upper_band = (df['high'] + df['low']) / 2 + multiplier * atr
    lower_band = (df['high'] + df['low']) / 2 - multiplier * atr
    supertrend = [0.0] * len(df)

    for i in range(1, len(df)):
        supertrend[i] = upper_band.iloc[i - 1] if supertrend[i - 1] <= upper_band.iloc[i - 1] else lower_band.iloc[i - 1]

    return supertrend

# Function to place a market buy order
def place_market_buy_order(symbol, quantity):
    try:
        order = exchange.create_market_buy_order(
            symbol=symbol,
            amount=quantity
        )
        print(f"Market Buy Order placed for {symbol}: {order}")
        return order
    except Exception as e:
        print(f"Error placing Market Buy Order for {symbol}: {e}")

# Function to place a market sell order
def place_market_sell_order(symbol, quantity):
    try:
        order = exchange.create_market_sell_order(
            symbol=symbol,
            amount=quantity
        )
        print(f"Market Sell Order placed for {symbol}: {order}")
        return order
    except Exception as e:
        print(f"Error placing Market Sell Order for {symbol}: {e}")

def supertrend_strategy():
    while True:
        try:
            for symbol in symbols:
                # Fetch historical data for each symbol with a 15-minute time interval
                historical_data = fetch_ohlcv(symbol, '15m', 200)

                # Check if there's enough data for Supertrend calculation
                if len(historical_data) < period:  
                    print(f"Not enough data for {symbol}. Waiting for more data...")
                    continue

                # Calculate Supertrend indicator
                historical_data['supertrend'] = calculate_supertrend(historical_data, period, multiplier)
                print(f"Supertrend value for {symbol}: {historical_data.iloc[-1]['supertrend']}")

                # Fetch the latest candlestick for each symbol
                latest_candle = exchange.fetch_ohlcv(symbol, '15m', limit=10)
                latest_open = latest_candle[0][1]  # Open price of the latest candle

                # Determine buy and sell signals
                supertrend_signal = historical_data.iloc[-1]['supertrend']
                current_close_2 = historical_data.iloc[-2]['close']
                #supertrend_signal_3 = historical_data.iloc[-3]['supertrend']
                current_close_3 = historical_data.iloc[-3]['close']
                
                if (
                   current_close_2 >= supertrend_signal and
                   current_close_3 <= supertrend_signal and
                   last_order_types[symbol] != 'BUY'
                ):
                   print(f'{symbol} Buy Signal (Supertrend)')
                   # Implement your buy logic here for futures
                   # For example, place a market buy order
                   quantity = fixed_quantity_usdt / float(current_close)
                   open_orders[symbol] = place_market_buy_order(symbol, quantity)
                   last_order_types[symbol] = 'BUY'

                elif (
                   current_close_2 <= supertrend_signal and
                   current_close_3 >= supertrend_signal and
                   last_order_types[symbol] != 'SELL'
                ):
                   print(f'{symbol} Sell Signal (Supertrend)')
                   # Implement your sell logic here for futures
                   # For example, place a market sell order
                   quantity = fixed_quantity_usdt / float(current_close)
                   open_orders[symbol] = place_market_sell_order(symbol, quantity)
                   last_order_types[symbol] = 'SELL'

            # Sleep for some time (e.g., 5 minutes) before checking again
            time.sleep(60)

        except Exception as e:
            print(f'An error occurred: {e}')
            traceback.print_exc()  # Print full exception traceback
            time.sleep(60)  # Wait for a minute before trying again

# Run the Supertrend strategy
supertrend_strategy()
